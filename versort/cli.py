"""CLI application and utilities."""
import os
import sys
from io import StringIO
from unittest.mock import patch

from plumbum import cli

from . import __version__, get_sorter, git_tag_matches


class VerSortApp(cli.Application):
    """A simple version sorter CLI app.

    Supported algorithms: PEP440, SemVer.
    """

    VERSION = __version__

    separator = cli.SwitchAttr(
        ["-s", "--separator"],
        help="Separator used when printing sorted results; the default is a new line",
    )

    def print_results(self, *results: str):
        """Print results from subcommands.

        Args:
            *results:
                Strings to be printed to STDOUT.
        """
        print(*results, sep=os.linesep if self.separator is None else self.separator)


@VerSortApp.subcommand("sort")
class VerSortSortApp(cli.Application):
    """Sort incoming versions."""

    first = cli.Flag(["-f", "--first"], help="Print only first match")
    reverse = cli.Flag(["-r", "--reverse"], help="Reverse order")
    stdin = cli.Flag(["-i", "--stdin"], help="Read versions from STDIN")

    def main(self, algorithm: str, *versions: str):
        """Sort versions from CLI.

        Args:
            algorithm:
                Used to obtain the sorter, passed to
                [get_sorter][versort.base.get_sorter].

            *versions:
                Version strings to be sorted.
        """
        sorter = get_sorter(algorithm)()
        if self.stdin:
            versions = tuple(sys.stdin.read().split())
        sorted_versions = sorter.sort(*versions, reverse=self.reverse)
        if self.first:
            print(sorted_versions[0])
            return
        self.parent.print_results(*sorted_versions)


@VerSortApp.subcommand("git-tag-matches")
class VerSortGitTagMatchesApp(cli.Application):
    """Format versions that match a git repo's `HEAD`.

    Examples:

        Suppose you have a repo checked out in `master` and tagged with `1.2.3`
        using SemVer.

        You can use this command to produce an output like this:
    """

    branch = cli.Flag(["-b", "--branch"], help="Consider `HEAD`'s ref a valid match")
    latest = cli.SwitchAttr(
        ["-l", "--latest"],
        default="",
        help="Add this tag to matches if `HEAD` is the latest tag",
    )
    major = cli.Flag(
        ["-m", "--major"],
        help="Add `x` to matches, if `HEAD` is tagged with `x.y.z` and it's the latest tag in the `x` series",
    )
    pattern = cli.SwitchAttr(
        ["-p", "--pattern"], default="%s", help="Pattern for results"
    )

    def main(self, algorithm: str, repo_root: cli.ExistingDirectory = "."):
        """Get git tag matches from CLI.

        Args:
            algorithm:
                Used to obtain the sorter, passed to
                [get_sorter][versort.base.get_sorter].

            repo_root:
                Where the git repo to be used is found.
        """
        sorter = get_sorter(algorithm)()
        self.parent.print_results(
            *git_tag_matches(
                sorter,
                repo_root,
                branch=self.branch,
                latest=self.latest,
                major=self.major,
                pattern=self.pattern,
            ),
        )


# Add --help-all results to docs
if __doc__:
    help_io = StringIO()
    with patch("sys.stdout", help_io):
        VerSortApp.run(["versort", "--help-all"], exit=False)
    help_io.seek(0)
    __doc__ += f"\n\nCLI help autogenerated from `versort --help-all`:\n\n```\n{help_io.read()}\n```"
